import { AxiosResponse } from 'axios';

declare type TEnvironments = 'production' | 'sandbox' | 'dev';
declare type EnvironmentsMapped = {
    [key in TEnvironments]: key;
};
declare const Environments: EnvironmentsMapped;
interface IRequestEvent {
    idempotency_key: string | null;
    method: string;
    path: string;
    request_start_time: number;
}
declare type TResponseEventIdemStatuses = 'stored' | 'bypassed' | 'replayed';
interface IResponseEventPagination {
    page: number;
    page_limit: number;
    page_count: number;
    total_count: number;
    page_cursor_next: string | null;
    page_cursor_prev: string | null;
}
interface IResponseEvent {
    request_id: string | null;
    idempotency_status: TResponseEventIdemStatuses | null;
    method: string;
    path: string;
    status: number;
    request_start_time: number;
    request_end_time: number;
    pagination: IResponseEventPagination;
}
declare type TOnRequest = (event: IRequestEvent) => void;
declare type TOnResponse = (event: IResponseEvent, axios_response: AxiosResponse) => void;
interface IConfigurationOpts {
    apiKey: string;
    env: TEnvironments;
    onRequest?: TOnRequest;
    onResponse?: TOnResponse;
}
declare class Configuration {
    baseURL: string;
    apiKey: string;
    onResponse: TOnResponse | null;
    onRequest: TOnRequest | null;
    constructor(opts: IConfigurationOpts);
    addPath(path: string): Configuration;
    private static _validateConfiguration;
}

declare type TReversalStatuses = 'pending_approval' | 'pending' | 'processing' | 'sent' | 'failed';
declare type TReversalDirections = 'debit' | 'credit';
interface IReversal {
    id: string;
    pmt_id: string;
    target_account: string;
    trace_id: string | null;
    direction: TReversalDirections;
    description: string;
    amount: number;
    status: TReversalStatuses;
    error: IResourceError | null;
    created_at: string;
    updated_at: string;
}
interface IReversalUpdateOpts {
    status: TReversalStatuses;
    description?: string | null;
}
declare class Reversal extends Resource {
    constructor(config: Configuration);
    get(id: string): Promise<IReversal>;
    list(): Promise<IReversal[]>;
    update(id: string, data: IReversalUpdateOpts): Promise<IReversal>;
}

declare const PaymentStatuses: {
    pending: string;
    canceled: string;
    processing: string;
    failed: string;
    sent: string;
    reversed: string;
    reversal_required: string;
    reversal_processing: string;
};
declare type TPaymentStatuses = 'pending' | 'canceled' | 'processing' | 'failed' | 'sent' | 'reversed';
declare const PaymentFundStatuses: {
    hold: string;
    pending: string;
    requested: string;
    clearing: string;
    failed: string;
    sent: string;
    unknown: string;
};
declare type TPaymentFundStatuses = 'hold' | 'pending' | 'requested' | 'clearing' | 'failed' | 'sent' | 'unknown';
declare const PaymentTypes: {
    standard: string;
    clearing: string;
};
declare type TPaymentTypes = 'standard' | 'clearing';
declare const PaymentFeeTypes: {
    total: string;
    markup: string;
};
declare type TPaymentFeeTypes = 'total' | 'markup';
interface IPaymentFee {
    type: TPaymentFeeTypes;
    amount: number;
}
interface IPayment {
    id: string;
    reversal_id: string | null;
    source_trace_id: string | null;
    destination_trace_id: string | null;
    source: string;
    destination: string;
    amount: number;
    description: string;
    status: TPaymentStatuses;
    fund_status?: TPaymentFundStatuses;
    error: IResourceError | null;
    metadata: {} | null;
    estimated_completion_date: string | null;
    source_settlement_date: string | null;
    destination_settlement_date: string | null;
    fee: IPaymentFee | null;
    type: TPaymentTypes;
    created_at: string;
    updated_at: string;
}
interface IPaymentCreateOpts {
    amount: number;
    source: string;
    destination: string;
    description: string;
    metadata?: {};
    fee?: IPaymentFee;
}
interface IPaymentListOpts {
    to_date?: string | null;
    from_date?: string | null;
    page?: number | string | null;
    page_limit?: number | string | null;
    page_cursor?: string | null;
    status?: string | null;
    type?: string | null;
    source?: string | null;
    destination?: string | null;
    reversal_id?: string | null;
    source_holder_id?: string;
    destination_holder_id?: string;
    acc_id?: string;
}
declare class PaymentSubResources {
    reversals: Reversal;
    constructor(id: string, config: Configuration);
}
declare class Payment extends Resource {
    constructor(config: Configuration);
    protected _call(id: any): PaymentSubResources;
    get(id: string): Promise<IPayment>;
    list(opts?: IPaymentListOpts): Promise<IPayment[]>;
    create(opts: IPaymentCreateOpts, requestConfig?: IRequestConfig): Promise<IPayment>;
    delete(id: string): Promise<IPayment>;
}

declare type TEntitySyncTypes = 'capabilities' | 'accounts';
interface IEntitySync {
    id: string;
    acc_id: string;
    status: string;
    type: TEntitySyncTypes;
    error: IResourceError | null;
    created_at: string;
    updated_at: string;
}
interface IEntitySyncCreateOpts {
    type: TEntitySyncTypes;
}
declare class EntitySync extends Resource {
    constructor(config: Configuration);
    get(id: string): Promise<IEntitySync>;
    create(data: IEntitySyncCreateOpts): Promise<IEntitySync>;
}

declare const EntityTypes: {
    individual: string;
    c_corporation: string;
    s_corporation: string;
    llc: string;
    partnership: string;
    sole_proprietorship: string;
    receive_only: string;
};
declare type TEntityTypes = 'individual' | 'c_corporation' | 's_corporation' | 'llc' | 'partnership' | 'sole_proprietorship' | 'receive_only';
declare const EntityCapabilities: {
    payments_send: string;
    payments_receive: string;
    payments_limited_send: string;
    data_retrieve: string;
    data_sync: string;
};
declare type TEntityCapabilities = 'payments:send' | 'payments:receive' | 'payments:limited-send' | 'data:retrieve' | 'data:sync';
declare const EntityStatuses: {
    active: string;
    incomplete: string;
    disabled: string;
};
declare type TEntityStatuses = 'active' | 'incomplete' | 'disabled';
interface IEntityIndividual {
    first_name: string | null;
    last_name: string | null;
    phone: string | null;
    email: string | null;
    dob: string | null;
    ssn?: string;
}
interface IEntityAddress {
    line1: string | null;
    line2: string | null;
    city: string | null;
    state: string | null;
    zip: string | null;
}
interface IEntityCorporationOwner {
    first_name: string | null;
    last_name: string | null;
    phone: string | null;
    email: string | null;
    dob: string | null;
    address: IEntityAddress;
}
interface IEntityCorporation {
    name: string | null;
    dba: string | null;
    ein: string | null;
    owners: IEntityCorporationOwner[];
}
interface IEntityReceiveOnly {
    name: string;
    phone: string | null;
    email: string | null;
}
interface IEntity {
    id: string;
    type: TEntityTypes;
    individual: IEntityIndividual | null;
    corporation: IEntityCorporation | null;
    receive_only: IEntityReceiveOnly | null;
    capabilities: TEntityCapabilities[];
    available_capabilities: TEntityCapabilities[];
    pending_capabilities: TEntityCapabilities[];
    address: IEntityAddress;
    status: TEntityStatuses;
    error: IResourceError | null;
    metadata: {} | null;
    created_at: string;
    updated_at: string;
}
interface IEntityCreateOpts {
    type: TEntityTypes;
    address?: IEntityAddress | null;
    metadata?: {};
}
interface IIndividualCreateOpts extends IEntityCreateOpts {
    type: 'individual';
    individual: Partial<IEntityIndividual>;
}
interface ICorporationCreateOpts extends IEntityCreateOpts {
    type: 'c_corporation' | 's_corporation' | 'llc' | 'partnership' | 'sole_proprietorship';
    corporation: Partial<IEntityCorporation>;
}
interface IReceiveOnlyCreateOpts extends IEntityCreateOpts {
    type: 'receive_only';
    receive_only: IEntityReceiveOnly;
}
interface IEntityUpdateOpts {
    address?: IEntityAddress;
    corporation?: Partial<IEntityCorporation>;
    individual?: Partial<IEntityIndividual>;
}
interface IEntityListOpts {
    to_date?: string | null;
    from_date?: string | null;
    page?: number | string | null;
    page_limit?: number | string | null;
    page_cursor?: string | null;
    status?: string | null;
    type?: string | null;
}
interface IEntityAnswer {
    id: string;
    text: string;
}
interface IEntityQuestion {
    id: string;
    text: string | null;
    answers: IEntityAnswer[];
}
interface IEntityQuestionResponse {
    questions: IEntityQuestion[];
    authenticated: boolean;
}
interface IAnswerOpts {
    question_id: string;
    answer_id: string;
}
interface IEntityUpdateAuthOpts {
    answers: IAnswerOpts[];
}
interface IEntityUpdateAuthResponse {
    questions: IEntityQuestion[];
    authenticated: boolean;
}
interface IEntityGetCreditScoreResponse {
    score: number;
    updated_at: string;
}
interface IEntityWithdrawConsentOpts {
    type: 'withdraw';
    reason: 'entity_withdrew_consent' | null;
}
declare class EntitySubResources {
    syncs: EntitySync;
    constructor(id: string, config: Configuration);
}
declare class Entity extends Resource {
    constructor(config: Configuration);
    protected _call(id: any): EntitySubResources;
    create(opts: IIndividualCreateOpts | ICorporationCreateOpts | IReceiveOnlyCreateOpts, requestConfig?: IRequestConfig): Promise<IEntity>;
    update(id: string, opts: IEntityUpdateOpts): Promise<IEntity>;
    get(id: string): Promise<IEntity>;
    list(opts?: IEntityListOpts): Promise<IEntity[]>;
    createAuthSession(id: string): Promise<IEntityQuestionResponse>;
    updateAuthSession(id: string, opts: IEntityUpdateAuthOpts): Promise<IEntityUpdateAuthResponse>;
    refreshCapabilities(id: string): Promise<IEntity>;
    getCreditScore(id: string): Promise<IEntityGetCreditScoreResponse>;
    withdrawConsent(id: string, data?: IEntityWithdrawConsentOpts): Promise<IEntity>;
}

declare type TSubResources = AccountSubResources | PaymentSubResources | EntitySubResources;
interface IRequestConfig {
    idempotency_key?: string;
}
declare class ExtensibleFunction extends Function {
    constructor(f: any);
}
declare class Resource extends ExtensibleFunction {
    private client;
    protected config: Configuration;
    constructor(config: Configuration);
    private getDefaultUserAgent;
    private configureRequestInterceptors;
    private configureResponseInterceptors;
    protected _call(id: string): TSubResources;
    protected _getRaw<Response>(): Promise<Response>;
    protected _get<Response>(): Promise<Response>;
    protected _getWithId<Response>(id: string): Promise<Response>;
    protected _getWithSubPath<Response>(path: string): Promise<Response>;
    protected _getWithParams<Response, Params = {}>(params: Params): Promise<Response>;
    protected _list<Response, Params = {}>(params?: Params): Promise<Response[]>;
    protected _create<Response, Data>(data: Data, requestConfig?: IRequestConfig): Promise<Response>;
    protected _createWithSubPath<Response, Data>(path: string, data: Data, requestConfig?: IRequestConfig): Promise<Response>;
    protected _updateWithId<Response, Data>(id: string, data: Data): Promise<Response>;
    protected _update<Response, Data>(data: Data): Promise<Response>;
    protected _updateWithSubPath<Response, Data>(path: string, data: Data, requestConfig?: IRequestConfig): Promise<Response>;
    protected _delete<Response>(id: string): Promise<Response>;
    protected _deleteWithSubPath<Response, Data>(path: string, data: Data, requestConfig?: IRequestConfig): Promise<Response>;
    protected _download<Response>(id: string): Promise<Response>;
    protected _postWithId<Response, Data>(id: string, data: Data): Promise<Response>;
}
interface IResourceError {
    type: string;
    code: number;
    sub_type: string;
    message: string;
}

declare type TVerificationStatuses = 'initiated' | 'pending' | 'verified' | 'disabled';
declare type TVerificationTypes = 'micro_deposits' | 'plaid' | 'mx' | 'auto_verify' | 'trusted_provisioner';
interface IVerification {
    id: string;
    status: TVerificationStatuses;
    type: TVerificationTypes;
    error: IResourceError | null;
    initiated_at: string;
    pending_at: string;
    verified_at: string;
    disabled_at: string;
    created_at: string;
    updated_at: string;
}
interface IMXCreateOpts {
    type: 'mx';
    mx: {
        accounts: {};
        transactions: any[];
    };
}
interface IPlaidCreateOpts {
    type: 'plaid';
    plaid: {
        balances: {};
        transactions: any[];
    };
}
interface ITellerCreateOpts {
    type: 'teller';
    teller: {
        balances: {};
        transactions: any[];
    };
}
interface IMicroDepositsCreateOpts {
    type: 'micro_deposits';
}
interface IMicroDepositsUpdateOpts {
    micro_deposits: {
        amounts: number[];
    };
}
interface IMicroDepositsTestAmountsResponse {
    amounts: number[];
}
declare class Verification extends Resource {
    constructor(config: Configuration);
    get(): Promise<IVerification>;
    create(data: IMXCreateOpts | IPlaidCreateOpts | IMicroDepositsCreateOpts | ITellerCreateOpts, requestConfig?: IRequestConfig): Promise<IVerification>;
    update(data: IMicroDepositsUpdateOpts): Promise<IVerification>;
    getTestAmounts(): Promise<IMicroDepositsTestAmountsResponse>;
}

interface IAccountSync {
    id: string;
    acc_id: string;
    status: string;
    error: IResourceError | null;
    created_at: string;
    updated_at: string;
}
interface IAccountSyncCreateOpts {
}
declare class AccountSync extends Resource {
    constructor(config: Configuration);
    get(id: string): Promise<IAccountSync>;
    create(data: IAccountSyncCreateOpts): Promise<IAccountSync>;
}

declare const AccountTypes: {
    ach: string;
    liability: string;
    clearing: string;
};
declare type TAccountTypes = 'ach' | 'liability' | 'clearing';
declare const AccountSubTypes: {
    savings: string;
    checking: string;
};
declare type TAccountSubTypes = 'savings' | 'checking';
declare const AccountClearingSubTypes: {
    single_use: string;
};
declare type TAccountClearingSubTypes = 'single_use';
declare const AccountStatuses: {
    disabled: string;
    active: string;
    processing: string;
    closed: string;
};
declare type TAccountStatuses = 'disabled' | 'active' | 'processing' | 'closed';
declare const AccountCapabilities: {
    payments_receive: string;
    payments_send: string;
    data_retrieve: string;
    data_sync: string;
};
declare type TAccountCapabilities = 'payments:receive' | 'payments:send' | 'data:retrieve' | 'data:sync';
declare const AccountLiabilityPaymentStatuses: {
    active: string;
    activating: string;
    unavailable: string;
};
declare type TAccountLiabilityPaymentStatuses = 'active' | 'activating' | 'unavailable';
declare const AccountLiabilityDataStatuses: {
    active: string;
    syncing: string;
    unavailable: string;
    failed: string;
    pending: string;
};
declare type TAccountLiabilityDataStatuses = 'active' | 'syncing' | 'unavailable' | 'failed' | 'pending';
declare const AccountLiabilitySyncTypes: {
    manual: string;
    auto: string;
};
declare type TAccountLiabilitySyncTypes = 'manual' | 'auto';
declare const TradelineAccountOwnership: {
    primary: string;
    authorized: string;
    joint: string;
    unknown: string;
};
declare type TTradelineAccountOwnership = 'primary' | 'authorized' | 'joint' | 'unknown';
declare const AccountLiabilityDataSources: {
    credit_report: string;
    financial_institution: string;
    unavailable: string;
};
declare type TAccountLiabilityDataSources = 'credit_report' | 'financial_institution' | 'unavailable';
declare const AccountLiabilityTypes: {
    student_loan: string;
    credit_card: string;
    mortgage: string;
    auto_loan: string;
    collection: string;
    personal_loan: string;
    business_loan: string;
    insurance: string;
    credit_builder: string;
    subscription: string;
    utility: string;
    medical: string;
    loan: string;
};
declare type TAccountLiabilityTypes = 'student_loan' | 'credit_card' | 'mortgage' | 'auto_loan' | 'collection' | 'personal_loan' | 'business_loan' | 'insurance' | 'credit_builder' | 'subscription' | 'utility' | 'medical' | 'loan';
declare const PastDueStatuses: {
    unknown: string;
    overdue: string;
    on_time: string;
};
declare type TPastDueStatuses = 'unknown' | 'overdue' | 'on_time';
declare const AutoPayStatuses: {
    unknown: string;
    active: string;
    inactive: string;
};
declare type TAutoPayStatuses = 'unknown' | 'active' | 'inactive';
interface IAccountLiabilityLoan {
    name: string;
    balance: number | null;
    opened_at: string | null;
    original_loan_amount: number | null;
    sub_type: string | null;
    term_length: number | null;
    closed_at: string | null;
    last_payment_amount: number | null;
    last_payment_date: string | null;
    next_payment_minimum_amount: number | null;
    next_payment_due_date: string | null;
    interest_rate_type: 'fixed' | 'variable';
    interest_rate_percentage: number | null;
    interest_rate_source: 'financial_institution' | 'public_data' | 'method' | null;
}
interface IAccountLiabilityCreditCard extends IAccountLiabilityLoan {
    last_statement_balance: number | null;
    remaining_statement_balance: number | null;
    available_credit: number | null;
    auto_pay_status: TAutoPayStatuses | null;
    auto_pay_amount: number | null;
    auto_pay_date: string | null;
    past_due_status: TPastDueStatuses | null;
    past_due_balance: number | null;
    past_due_date: string | null;
    credit_limit: number | null;
    pending_purchase_authorization_amount: number | null;
    pending_credit_authorization_amount: number | null;
    interest_saving_balance: number | null;
    next_statement_date: string | null;
}
interface IAccountLiabilityAutoLoan extends IAccountLiabilityLoan {
    sub_type: 'lease' | 'loan' | null;
    payoff_amount: number | null;
    payoff_amount_term: number | null;
    past_due_status: TPastDueStatuses | null;
    past_due_balance: number | null;
    past_due_date: string | null;
    late_fees_amount: number | null;
    expected_payoff_date: string | null;
    principal_balance: number | null;
    per_diem_amount: number | null;
    mileage_allocation: number | null;
}
interface IAccountLiabilityStudentLoan extends IAccountLiabilityLoan {
    sub_type: 'federal' | 'private' | null;
    sequence: number | null;
    disbursed_at: string | null;
    expected_payoff_date: string | null;
    payoff_amount: number | null;
    payoff_amount_term: number | null;
    principal_balance: number | null;
}
interface IAccountLiabilityMortgage extends IAccountLiabilityLoan {
    principal_balance: number | null;
    expected_payoff_date: string | null;
    address_street: string | null;
    address_city: string | null;
    address_state: string | null;
    address_zip: string | null;
    property_value: number | null;
    past_due_status: TPastDueStatuses | null;
    past_due_balance: number | null;
    past_due_date: string | null;
    payoff_amount: number | null;
    payoff_amount_term: number | null;
    year_to_date_interest_paid: number | null;
    year_to_date_principal_paid: number | null;
    year_to_date_taxes_paid: number | null;
    year_start_principal_balance: number | null;
    escrow_balance: number | null;
}
interface IAccountLiabilityPersonalLoan extends IAccountLiabilityLoan {
    expected_payoff_date: string | null;
    available_credit: number | null;
    principal_balance: number | null;
    year_to_date_interest_paid: number | null;
}
interface IAccountLiabilityCreditBuilder extends IAccountLiabilityLoan {
}
interface IAccountLiabilityCollection extends IAccountLiabilityLoan {
}
interface IAccountLiabilityBusinessLoan {
    name: string;
    balance: number | null;
    opened_at: string | null;
}
interface IAccountLiabilityInsurance {
    name: string;
    balance: number | null;
    opened_at: string | null;
}
interface IAccountLiabilitySubscription {
    name: string;
    balance: number | null;
    opened_at: string | null;
}
interface IAccountLiabilityUtility {
    name: string;
    balance: number | null;
    opened_at: string | null;
}
interface IAccountLiabilityMedical {
    name: string;
    balance: number | null;
    opened_at: string | null;
}
interface IAccountACH {
    routing: string;
    number: string;
    type: TAccountSubTypes;
}
interface IAccountLiability {
    mch_id: string;
    mask: string;
    payment_status: TAccountLiabilityPaymentStatuses;
    data_status: TAccountLiabilityDataStatuses;
    data_last_successful_sync: string | null;
    data_status_error: IResourceError | null;
    data_source: TAccountLiabilityDataSources;
    data_updated_at: string | null;
    data_sync_type: TAccountLiabilitySyncTypes;
    ownership: TTradelineAccountOwnership;
    hash: string;
    type: TAccountLiabilityTypes;
    loan: IAccountLiabilityLoan | null;
    student_loan: IAccountLiabilityStudentLoan | null;
    credit_card: IAccountLiabilityCreditCard | null;
    mortgage: IAccountLiabilityMortgage | null;
    auto_loan: IAccountLiabilityAutoLoan | null;
    personal_loan: IAccountLiabilityPersonalLoan | null;
    business_loan: IAccountLiabilityBusinessLoan | null;
    collection: IAccountLiabilityCollection | null;
    insurance: IAccountLiabilityInsurance | null;
    credit_builder: IAccountLiabilityCreditBuilder | null;
    subscription: IAccountLiabilitySubscription | null;
    utility: IAccountLiabilityUtility | null;
    medical: IAccountLiabilityMedical | null;
}
declare type IAccountClearing = {
    routing: string;
    number: string;
};
interface IAccount {
    id: string;
    holder_id: string;
    status: TAccountStatuses;
    type: TAccountTypes;
    ach: IAccountACH | null;
    liability: IAccountLiability | null;
    clearing: IAccountClearing | null;
    capabilities: TAccountCapabilities[];
    available_capabilities: TAccountCapabilities[];
    error: IResourceError | null;
    created_at: string;
    updated_at: string;
    metadata: {} | null;
}
interface IAccountCreateOpts {
    holder_id: string;
    metadata?: {};
}
interface IACHCreateOpts extends IAccountCreateOpts {
    ach: IAccountACH;
}
interface ILiabilityCreateOpts extends IAccountCreateOpts {
    liability: {
        mch_id: string;
        account_number: string;
    };
}
interface IClearingCreateOpts extends IAccountCreateOpts {
    clearing: {
        type: TAccountClearingSubTypes;
    };
}
interface IAccountCreateBulkSyncOpts {
    acc_ids: string[];
}
interface IAccountCreateBulkSyncResponse {
    success: string[];
    failed: string[];
    results: IAccountSync[];
}
interface IAccountWithdrawConsentOpts {
    type: 'withdraw';
    reason: 'holder_withdrew_consent' | null;
}
interface IAccountListOpts {
    to_date?: string | null;
    from_date?: string | null;
    page?: number | string | null;
    page_limit?: number | string | null;
    page_cursor?: string | null;
    status?: string | null;
    type?: string | null;
    holder_id?: string | null;
    'liability.mch_id'?: string | null;
    'liability.type'?: string | null;
}
interface IAccountDetails {
    id: string;
    type: TAccountTypes;
    aggregator: string | null;
    name: string;
    institution_name: string;
    institution_logo: string;
    mask: string;
    created_at: string;
    updated_at: string;
    metadata: {} | null;
}
interface IAccountTransaction {
    id: string;
    reference_id: string;
    date: string;
    amount: number;
    status: 'pending' | 'success';
    description: string | null;
}
declare class AccountSubResources {
    verification: Verification;
    syncs: AccountSync;
    constructor(id: string, config: Configuration);
}
declare class Account extends Resource {
    constructor(config: Configuration);
    protected _call(id: any): AccountSubResources;
    get(id: string): Promise<IAccount>;
    list(opts?: IAccountListOpts): Promise<IAccount[]>;
    create(data: IACHCreateOpts | ILiabilityCreateOpts | IClearingCreateOpts, requestConfig?: IRequestConfig): Promise<IAccount>;
    getDetails(id: string): Promise<IAccountDetails>;
    bulkSync(acc_ids: string[]): Promise<IAccountCreateBulkSyncResponse>;
    sync(id: string): Promise<IAccountSync>;
    enrollAutoSyncs(id: string): Promise<IAccount>;
    unenrollAutoSyncs(id: string): Promise<IAccount>;
    withdrawConsent(id: string, data?: IAccountWithdrawConsentOpts): Promise<IAccount>;
}

declare const BINBrands: {
    amex: string;
    visa: string;
    mastercard: string;
    discover: string;
    diners_club: string;
};
declare type TBINBrands = 'amex' | 'visa' | 'mastercard' | 'discover' | 'diners_club';
declare const BINTypes: {
    credit: string;
    debit: string;
};
declare type TBINTypes = 'credit' | 'debit';
interface IBIN {
    id: string | null;
    bin: string | null;
    brand: TBINBrands;
    issuer: string | null;
    type: TBINTypes | null;
    category: string | null;
    bank_url: string | null;
    sample_pan: string | null;
}
declare class Bin extends Resource {
    constructor(config: Configuration);
    get(bin: string): Promise<IBIN>;
}

declare const ElementTypes: {
    link: string;
    auth: string;
};
declare type TElementTypes = 'link' | 'auth';
declare type TAuthElementAccountFilterTypes = 'auto_loan' | 'mortgage' | 'credit_card' | 'loan' | 'student_loan' | 'personal_loan';
declare type TAuthElementAccountFilterCapabilities = 'payments:receive' | 'data:sync';
declare type TAuthElementAccountFilterSelectionTypes = 'single' | 'multiple';
interface ILinkElementCreateOpts {
    mch_id?: string;
    mask?: string;
}
interface IAuthElementAccountFiltersOpts {
    selection_type?: TAuthElementAccountFilterSelectionTypes;
    capabilities?: TAuthElementAccountFilterCapabilities[];
    types?: TAuthElementAccountFilterTypes[];
}
interface IAuthElementEntityOpts {
    type: 'individual';
    individual: {
        first_name?: string;
        last_name?: string;
        dob?: string;
        email?: string;
        phone?: string;
        phone_verification_type?: 'sms' | 'tos';
        phone_verification_timestamp?: string;
    };
}
interface IAuthElementCreateOpts {
    account_filters?: IAuthElementAccountFiltersOpts;
    entity?: IAuthElementEntityOpts;
}
interface IElementTokenCreateOpts {
    entity_id?: string;
    type: TElementTypes;
    team_name?: string;
    team_logo?: string | null;
    team_icon?: string | null;
    link?: ILinkElementCreateOpts;
    auth?: IAuthElementCreateOpts;
}
interface IElement {
    element_token: string;
}
interface IElementExchangePublicAccountOpts {
    public_account_token?: string;
    public_account_tokens?: string[];
}
declare class Element extends Resource {
    constructor(config: Configuration);
    createToken(opts: IElementTokenCreateOpts): Promise<IElement>;
    exchangePublicAccountToken(public_account_token: string): Promise<IAccount>;
    exchangePublicAccountTokens(public_account_tokens: string[]): Promise<IAccount>;
}

declare const MerchantTypes: {
    auto_loan: string;
    business_loan: string;
    credit_card: string;
    electric_utility: string;
    home_loan: string;
    insurance: string;
    internet_utility: string;
    loan: string;
    medical: string;
    personal_loan: string;
    student_loan: string;
    telephone_utility: string;
    television_utility: string;
    water_utility: string;
    bank: string;
    home_equity_loan: string;
    mortgage: string;
    utility: string;
    waste_utility: string;
};
declare type TMerchantTypes = 'auto_loan' | 'business_loan' | 'credit_card' | 'electric_utility' | 'home_loan' | 'insurance' | 'internet_utility' | 'loan' | 'medical' | 'personal_loan' | 'student_loan' | 'telephone_utility' | 'television_utility' | 'water_utility' | 'bank' | 'home_equity_loan' | 'mortgage' | 'utility' | 'waste_utility';
interface IMerchantProviderIds {
    plaid: string[];
    mx: string[];
    finicity: string[];
}
interface IMerchant {
    mch_id: string;
    parent_name: string;
    name: string;
    logo: string;
    description: string | null;
    note: string | null;
    types: TMerchantTypes[];
    account_prefixes: string[];
    provider_ids: IMerchantProviderIds;
    customized_auth: boolean;
    is_temp: boolean;
}
interface IMerchantListOpts {
    name?: string;
    'provider_id.plaid'?: string;
    'provider_id.mx'?: string;
    'provider_id.finicity'?: string;
}
declare class Merchant extends Resource {
    constructor(config: Configuration);
    get(id: string): Promise<IMerchant>;
    list(opts: IMerchantListOpts): Promise<IMerchant[]>;
}

declare const ReportTypes: {
    payments_created_current: string;
    payments_created_previous: string;
    payments_updated_current: string;
    payments_updated_previous: string;
};
declare type TReportTypes = 'payments.created.current' | 'payments.created.previous' | 'payments.updated.current' | 'payments.updated.previous';
declare const ReportStatuses: {
    processing: string;
    completed: string;
};
declare type TReportStatuses = 'processing' | 'completed';
interface IReport {
    id: string;
    type: TReportTypes;
    url: string;
    status: TReportStatuses;
    metadata: {} | null;
    created_at: string;
    updated_at: string;
}
interface IReportCreateOpts {
    type: TReportTypes;
    metadata?: {};
}
declare class Report extends Resource {
    constructor(config: Configuration);
    get(id: string): Promise<IReport>;
    create(opts: IReportCreateOpts, requestConfig?: IRequestConfig): Promise<IReport>;
    download(id: string): Promise<string>;
}

declare const RoutingNumberOfficeTypes: {
    main: string;
    branch: string;
};
declare type TRoutingNumberOfficeTypes = 'main' | 'branch';
interface IRoutingNumberAddress {
    line1: string;
    line2: string | null;
    city: string;
    state: string;
    zip: string;
}
interface IRoutingNumber {
    id: string;
    institution_name: string;
    routing_number: string;
    logo: string;
    office_type: TRoutingNumberOfficeTypes;
    change_date: string;
    address: IRoutingNumberAddress;
    phone: string | null;
}
declare class RoutingNumber extends Resource {
    constructor(config: Configuration);
    get(routing_number: string): Promise<IRoutingNumber>;
}

declare const WebhookTypes: {
    payment_create: string;
    payment_update: string;
    account_create: string;
    account_update: string;
    entity_update: string;
    entity_create: string;
    account_verification_create: string;
    account_verification_update: string;
    payment_reversal_create: string;
    payment_reversal_update: string;
    connection_create: string;
    connection_update: string;
    account_verification_sent: string;
    account_verification_returned: string;
};
declare type TWebhookTypes = 'payment.create' | 'payment.update' | 'account.create' | 'account.update' | 'entity.update' | 'entity.create' | 'account_verification.create' | 'account_verification.update' | 'payment_reversal.create' | 'payment_reversal.update' | 'connection.create' | 'connection.update' | 'account_verification.sent' | 'account_verification.returned';
interface IWebhook {
    id: string;
    type: TWebhookTypes;
    url: string;
    metadata: {} | null;
    created_at: string;
    updated_at: string;
}
interface IWebhookCreateOpts {
    type: TWebhookTypes;
    url: string;
    auth_token?: string;
    metadata?: {};
}
declare class Webhook extends Resource {
    constructor(config: Configuration);
    get(id: string): Promise<IWebhook>;
    delete(id: string): Promise<IWebhook>;
    list(): Promise<IWebhook[]>;
    create(opts: IWebhookCreateOpts, requestConfig?: IRequestConfig): Promise<IWebhook>;
}

interface IPingResponse {
    success: boolean;
    data: null;
    message: 'pong';
}
declare class HealthCheck extends Resource {
    constructor(config: Configuration);
    get(): Promise<IPingResponse>;
}

declare type TConnectionSources = 'plaid' | 'mch_5500';
declare type TConnectionStatuses = 'success' | 'reauth_required' | 'syncing' | 'failed';
interface IConnection {
    id: string;
    entity_id: string;
    accounts: string[];
    source: TConnectionSources;
    status: TConnectionStatuses;
    error: IResourceError | null;
    created_at: string;
    updated_at: string;
    last_synced_at: string;
}
interface IConnectionUpdateOpts {
    status: 'syncing';
}
declare class Connection extends Resource {
    constructor(config: Configuration);
    list(): Promise<IConnection[]>;
    get(id: string): Promise<IConnection>;
    update(id: string, opts: IConnectionUpdateOpts): Promise<IConnection>;
    getPublicAccountTokens(id: string): Promise<string[]>;
}

interface ISimulatePaymentUpdateOpts {
    status: TPaymentStatuses;
    error_code?: number | null;
}
declare class SimulatePayment extends Resource {
    constructor(config: Configuration);
    update(id: string, data: ISimulatePaymentUpdateOpts): Promise<IPayment>;
}

declare class Simulate extends Resource {
    payments: SimulatePayment;
    constructor(config: Configuration);
}

declare class Method {
    accounts: Account;
    bins: Bin;
    elements: Element;
    entities: Entity;
    merchants: Merchant;
    payments: Payment;
    reports: Report;
    routingNumbers: RoutingNumber;
    webhooks: Webhook;
    healthcheck: HealthCheck;
    connections: Connection;
    simulate: Simulate;
    constructor(opts: IConfigurationOpts);
    ping(): Promise<IPingResponse>;
}

declare type TMethodErrorTypes = 'INVALID_AUTHORIZATION' | 'INVALID_REQUEST' | 'API_ERROR';
interface MethodErrorOpts {
    type: TMethodErrorTypes;
    sub_type: string;
    message: string;
    code: number;
}
declare class MethodError extends Error {
    type: TMethodErrorTypes;
    sub_type: string;
    message: string;
    code: number;
    constructor(opts: MethodErrorOpts);
    static generate(opts: MethodErrorOpts): MethodError;
}
declare class MethodInternalError extends MethodError {
}
declare class MethodInvalidRequestError extends MethodError {
}
declare class MethodAuthorizationError extends MethodError {
}

export { AccountCapabilities, AccountClearingSubTypes, AccountLiabilityDataSources, AccountLiabilityDataStatuses, AccountLiabilityPaymentStatuses, AccountLiabilitySyncTypes, AccountLiabilityTypes, AccountStatuses, AccountSubResources, AccountSubTypes, AccountTypes, AutoPayStatuses, BINBrands, BINTypes, ElementTypes, EntityCapabilities, EntityStatuses, EntitySubResources, EntityTypes, Environments, IACHCreateOpts, IAccount, IAccountACH, IAccountClearing, IAccountCreateBulkSyncOpts, IAccountCreateBulkSyncResponse, IAccountCreateOpts, IAccountDetails, IAccountLiability, IAccountLiabilityAutoLoan, IAccountLiabilityBusinessLoan, IAccountLiabilityCollection, IAccountLiabilityCreditBuilder, IAccountLiabilityCreditCard, IAccountLiabilityInsurance, IAccountLiabilityLoan, IAccountLiabilityMedical, IAccountLiabilityMortgage, IAccountLiabilityPersonalLoan, IAccountLiabilityStudentLoan, IAccountLiabilitySubscription, IAccountLiabilityUtility, IAccountListOpts, IAccountTransaction, IAccountWithdrawConsentOpts, IAnswerOpts, IAuthElementAccountFiltersOpts, IAuthElementCreateOpts, IAuthElementEntityOpts, IBIN, IClearingCreateOpts, IConfigurationOpts, ICorporationCreateOpts, IElement, IElementExchangePublicAccountOpts, IElementTokenCreateOpts, IEntity, IEntityAddress, IEntityAnswer, IEntityCorporation, IEntityCorporationOwner, IEntityCreateOpts, IEntityGetCreditScoreResponse, IEntityIndividual, IEntityListOpts, IEntityQuestion, IEntityQuestionResponse, IEntityReceiveOnly, IEntityUpdateAuthOpts, IEntityUpdateAuthResponse, IEntityUpdateOpts, IEntityWithdrawConsentOpts, IIndividualCreateOpts, ILiabilityCreateOpts, ILinkElementCreateOpts, IMerchant, IMerchantListOpts, IMerchantProviderIds, IPayment, IPaymentCreateOpts, IPaymentFee, IPaymentListOpts, IReceiveOnlyCreateOpts, IReport, IReportCreateOpts, IRequestEvent, IResponseEvent, IResponseEventPagination, IRoutingNumber, IRoutingNumberAddress, IWebhook, IWebhookCreateOpts, MerchantTypes, Method, MethodAuthorizationError, MethodError, MethodErrorOpts, MethodInternalError, MethodInvalidRequestError, PastDueStatuses, PaymentFeeTypes, PaymentFundStatuses, PaymentStatuses, PaymentSubResources, PaymentTypes, ReportStatuses, ReportTypes, RoutingNumberOfficeTypes, TAccountCapabilities, TAccountClearingSubTypes, TAccountLiabilityDataSources, TAccountLiabilityDataStatuses, TAccountLiabilityPaymentStatuses, TAccountLiabilitySyncTypes, TAccountLiabilityTypes, TAccountStatuses, TAccountSubTypes, TAccountTypes, TAuthElementAccountFilterCapabilities, TAuthElementAccountFilterSelectionTypes, TAuthElementAccountFilterTypes, TAutoPayStatuses, TBINBrands, TBINTypes, TElementTypes, TEntityCapabilities, TEntityStatuses, TEntityTypes, TMerchantTypes, TOnRequest, TOnResponse, TPastDueStatuses, TPaymentFeeTypes, TPaymentFundStatuses, TPaymentStatuses, TPaymentTypes, TReportStatuses, TReportTypes, TResponseEventIdemStatuses, TRoutingNumberOfficeTypes, TTradelineAccountOwnership, TWebhookTypes, TradelineAccountOwnership, WebhookTypes };
